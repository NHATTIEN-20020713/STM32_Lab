Lab2_1

void update7SEG(int index)
{
	if(index == 0)
	{
		display7SEG(1);
	}
	else if(index == 1)
	{
		display7SEG(2);
	}
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int led_index = 0;
  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
  update7SEG(led_index);
  led_index++;
  setTimer1(50);

  while (1)
  {
	  if(timer1_flag == 1)
	  {
		  setTimer1(50);
		  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
		  HAL_GPIO_TogglePin(EN0_GPIO_Port, EN0_Pin);
		  HAL_GPIO_TogglePin(EN1_GPIO_Port, EN1_Pin);
		  update7SEG(led_index);
		  if(led_index >= 1)
		  {
			  led_index = 0;
		  }
		  else led_index++;
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

Lab2_2

void update7SEG(int index)
{
	if(index == 0)
	{
		display7SEG(1);
	}
	else if(index == 1)
	{
		display7SEG(2);
	}
	else if(index == 2)
	{
		display7SEG(3);
	}
	else if(index == 3)
	{
		display7SEG(0);
	}
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int led_index = 0;
  setTimer1(50); // 7SEGMENT-LED
  setTimer2(100); // 2 LED-BLINKY
  HAL_GPIO_WritePin(DOT_GPIO_Port, DOT_Pin, SET);

  while (1)
  {
	  if(timer1_flag == 1)
	  {
		  setTimer1(50);
		  if(led_index == 0)
		  {
			  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,RESET);
			  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,SET);
			  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,SET);
			  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,SET);
		  }
		  else if(led_index == 1)
		  {
			  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,SET);
			  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,RESET);
			  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,SET);
			  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,SET);
			}
		  else if(led_index == 2)
		  {
			  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,SET);
			  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,SET);
			  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,RESET);
			  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,SET);
		  }
		  else
		  {
			  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,SET);
			  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,SET);
			  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,SET);
			  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,RESET);
		  }
		  update7SEG(led_index);

		  if(led_index >= 3)
		  {
			  led_index = 0;
		  }
		  else led_index++;
	  }
	  if(timer2_flag == 1)
	  {
		  setTimer2(100);
		  HAL_GPIO_TogglePin(DOT_GPIO_Port, DOT_Pin);
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

Lab2_3

const int MAX_LED = 4;
int index_led = 0;
int led_buffer[4] = {1, 2, 3, 4};

void update7SEG(int index)
{
	switch(index)
	{
		case 0:
			//Display the first 7SEG with led_buffer[0]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,RESET);
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,SET);
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,SET);
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,SET);
			display7SEG(led_buffer[index]);
			break;
		case 1:
			//Display the second 7SEG with led_buffer[1]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,SET);
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,RESET);
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,SET);
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,SET);
			display7SEG(led_buffer[index]);
			break;
		case 2:
			//Display the third 7SEG with led_buffer[2]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,SET);
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,SET);
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,RESET);
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,SET);
			display7SEG(led_buffer[index]);
			break;
		case 3:
			//Display the forth 7SEG with led_buffer[3]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,SET);
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,SET);
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,SET);
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,RESET);
			display7SEG(led_buffer[index]);
			break;
		default:
			break;
	}
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int led_index = 0;
  setTimer1(50); // 7SEGMENT-LED

  while (1)
  {
	  if(timer1_flag == 1)
	  {
		  setTimer1(50);
		  update7SEG(led_index);
		  if(led_index >= 3)
		  {
			  led_index = 0;
		  }
		  else led_index++;
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

Lab2_4

const int MAX_LED = 4;
int index_led = 0;
int led_buffer[4] = {1, 2, 3, 0};

void update7SEG(int index)
{
	switch(index)
	{
		case 0:
			//Display the first 7SEG with led_buffer[0]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,RESET);
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,SET);
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,SET);
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,SET);
			display7SEG(led_buffer[index]);
			break;
		case 1:
			//Display the second 7SEG with led_buffer[1]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,SET);
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,RESET);
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,SET);
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,SET);
			display7SEG(led_buffer[index]);
			break;
		case 2:
			//Display the third 7SEG with led_buffer[2]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,SET);
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,SET);
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,RESET);
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,SET);
			display7SEG(led_buffer[index]);
			break;
		case 3:
			//Display the forth 7SEG with led_buffer[3]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,SET);
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,SET);
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,SET);
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,RESET);
			display7SEG(led_buffer[index]);
			break;
		default:
			break;
	}
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int led_index = 0;
  setTimer1(25); // 7SEGMENT-LED
  setTimer2(100);

  while (1)
  {
	  if(timer1_flag == 1)
	  {
		  setTimer1(25);
		  update7SEG(led_index);
		  if(led_index >= 3)
		  {
			  led_index = 0;
		  }
		  else led_index++;
	  }
	  if(timer2_flag == 1)
	  {
		  setTimer2(100);
		  HAL_GPIO_TogglePin(DOT_GPIO_Port, DOT_Pin);
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

Lab2_6

const int MAX_LED = 4;
int index_led = 0;
int led_buffer[4] = {1, 2, 3, 0};
int hour = 15, minute = 8, second = 50;

void update7SEG(int index)
{
	switch(index)
	{
		case 0:
			//Display the first 7SEG with led_buffer[0]
			display7SEG(led_buffer[index]);
			break;
		case 1:
			//Display the second 7SEG with led_buffer[1]
			display7SEG(led_buffer[index]);
			break;
		case 2:
			//Display the third 7SEG with led_buffer[2]
			display7SEG(led_buffer[index]);
			break;
		case 3:
			//Display the forth 7SEG with led_buffer[3]
			display7SEG(led_buffer[index]);
			break;
		default:
			break;
	}
}

void updateClockBuffer()
{
	led_buffer[0]= hour/10;
	led_buffer[1]= hour%10;
	led_buffer[2]= minute/10;
	led_buffer[3]= minute%10;
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int led_index = 0;
  setTimer1(25); // 7SEGMENT-LED
  setTimer2(100);

  while (1)
  {
	  if(timer1_flag == 1)
	  {
		  setTimer1(25);
		  if(led_index == 0)
		  {
			  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,RESET);
			  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,SET);
			  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,SET);
			  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,SET);

		  }
		  else if(led_index == 1)
		  {
			  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,SET);
			  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,RESET);
			  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,SET);
			  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,SET);
		  }
		  else if(led_index == 2)
		  {
			  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,SET);
			  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,SET);
			  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,RESET);
			  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,SET);
		  }
		  else
		  {
			  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,SET);
			  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,SET);
			  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,SET);
			  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,RESET);
		  }
		  update7SEG(led_index);
		  if(led_index>=3) led_index=0;
		  else led_index++;
	  }
	  if(timer2_flag == 1)
	  {
		  setTimer2(100);
		  HAL_GPIO_TogglePin(DOT_GPIO_Port, DOT_Pin);
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

Lab2_8

const int MAX_LED = 4;
int index_led = 0;
int led_buffer[4] = {1, 2, 3, 0};
int hour = 15, minute = 8, second = 50;

void update7SEG(int index)
{
	switch(index)
	{
		case 0:
			//Display the first 7SEG with led_buffer[0]
			display7SEG(led_buffer[index]);
			break;
		case 1:
			//Display the second 7SEG with led_buffer[1]
			display7SEG(led_buffer[index]);
			break;
		case 2:
			//Display the third 7SEG with led_buffer[2]
			display7SEG(led_buffer[index]);
			break;
		case 3:
			//Display the forth 7SEG with led_buffer[3]
			display7SEG(led_buffer[index]);
			break;
		default:
			break;
	}
}

void updateClockBuffer()
{
	led_buffer[0]= hour/10;
	led_buffer[1]= hour%10;
	led_buffer[2]= minute/10;
	led_buffer[3]= minute%10;
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int led_index = 0;
  setTimer1(25); // 7SEGMENT-LED
  setTimer2(100);

  while (1)
  {
	  if(timer1_flag == 1)
	  {
		  setTimer1(25);
		  if (led_index == 0)
		  {
			  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,RESET);
			  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,SET);
			  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,SET);
			  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,SET);

		  }
		  else if(led_index == 1)
		  {
				HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,SET);
				HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,RESET);
				HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,SET);
				HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,SET);
		  }
		  else if(led_index == 2)

		  {
			  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,SET);
			  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,SET);
			  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,RESET);
			  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,SET);
		  }
		  else
		  {
			  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,SET);
			  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,SET);
			  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,SET);
			  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,RESET);
		  }
		  update7SEG(led_index);
		  if(led_index >= 3) led_index = 0;
		  else led_index++;
	  }
	  if(timer2_flag == 1)
	  {
		  setTimer2(100);
		  second++;
		  if(second >= 60)
		  {
			  second = 0;
			  minute++;
		  }
		  if(minute >= 60)
		  {
			  minute = 0;
			  hour++;
		  }
		  if(hour >= 24)
		  {
			  hour = 0;
		  }
		  updateClockBuffer();
		  HAL_GPIO_TogglePin(DOT_GPIO_Port, DOT_Pin);
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}